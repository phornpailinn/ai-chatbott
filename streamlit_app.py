import streamlit as st
import google.generativeai as genai

# App title
st.title("ü¶Å Explore the Zoo: Chat with Us!")

# Input for Gemini API Key
gemini_api_key = "AIzaSyAPjp1uXJVHrSnv9cRJ0GGEMCLnhlCz5w4"

# Authenticate the API if the user provides a key
if gemini_api_key:
    try:
        # Configure the API with the provided key
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel("gemini-pro")  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Gemini ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        st.success("Gemini API Key ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini model: {e}")

# Initialize chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Dictionary of zoo information for various zoos
zoo_info = {
    "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏î‡∏∏‡∏™‡∏¥‡∏ï": "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏î‡∏∏‡∏™‡∏¥‡∏ï‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πâ‡∏≤‡∏á ‡πÄ‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏¢‡∏µ‡∏£‡∏≤‡∏ü ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 08:00 ‡∏ô. ‡∏ñ‡∏∂‡∏á 18:00 ‡∏ô.",
    "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏ä‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 08:00 ‡∏ô. ‡∏ñ‡∏∂‡∏á 18:00 ‡∏ô.",
    "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏°‡∏µ‡∏´‡∏°‡∏µ‡πÅ‡∏û‡∏ô‡∏î‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏ô‡∏¥‡∏î ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 08:00 ‡∏ô. ‡∏ñ‡∏∂‡∏á 17:00 ‡∏ô.",
    "‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå": "‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏Ñ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡∏µ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏Ñ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 09:00 ‡∏ô. ‡∏ñ‡∏∂‡∏á 17:00 ‡∏ô.",
    "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤": "‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏´‡∏≤‡∏¢‡∏≤‡∏Å ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏£‡∏î‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 08:00 ‡∏ô. ‡∏ñ‡∏∂‡∏á 18:00 ‡∏ô."
}

# Function to respond based on keywords
def get_zoo_info(user_input):
    user_input_lower = user_input.lower()
    
    if "‡∏î‡∏∏‡∏™‡∏¥‡∏ï" in user_input_lower:
        return zoo_info["‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏î‡∏∏‡∏™‡∏¥‡∏ï"]
    elif "‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" in user_input_lower:
        return zoo_info["‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß"]
    elif "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà" in user_input_lower:
        return zoo_info["‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"]
    elif "‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå" in user_input_lower:
        return zoo_info["‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå"]
    elif "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤" in user_input_lower:
        return zoo_info["‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤"]
    else:
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏î‡∏∏‡∏™‡∏¥‡∏ï, ‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, ‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏ã‡∏≤‡∏ü‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞."

# Input for user message
user_input = st.text_input("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:")

# Add user input to chat history without displaying it
if user_input:
    st.session_state.chat_history.append(("user", user_input))

    # Check if API Key is provided and model is set up
    if gemini_api_key and model:
        try:
            # Generate AI-based response
            response = model.generate_content(user_input)
            bot_response = response.text
            st.session_state.chat_history.append(("assistant", bot_response))
            st.write(f"**AI ‡∏ö‡∏≠‡∏ó:** {bot_response}")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö AI: {e}")
    
    else:
        # Use predefined zoo information if no AI response
        bot_response = get_zoo_info(user_input)
        
        # Append bot response to chat history without displaying it
        st.session_state.chat_history.append(("assistant", bot_response))
        st.write(f"**‡∏ö‡∏≠‡∏ó:** {bot_response}")


